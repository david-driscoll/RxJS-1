/* tslint:disable */
import * as operator from './operator-typings';
/* tslint:enable */

export interface CoreOperators<T> {
  buffer: operator.operator_proto_buffer<T>;
  bufferCount: operator.operator_proto_bufferCount<T>;
  bufferTime: operator.operator_proto_bufferTime<T>;
  bufferToggle: operator.operator_proto_bufferToggle<T>;
  bufferWhen: operator.operator_proto_bufferWhen<T>;
  catch: operator.operator_proto_catch<T>;
  combineAll: operator.operator_proto_combineAll<T>;
  combineLatest: operator.operator_proto_combineLatest<T>;
  concat: operator.operator_proto_concat<T>;
  concatAll: operator.operator_proto_concatAll<T>;
  concatMap: operator.operator_proto_concatMap<T>;
  concatMapTo: operator.operator_proto_concatMapTo<T>;
  count: operator.operator_proto_count<T>;
  dematerialize: operator.operator_proto_dematerialize<T>;
  debounce: operator.operator_proto_debounce<T>;
  debounceTime: operator.operator_proto_debounceTime<T>;
  defaultIfEmpty: operator.operator_proto_defaultIfEmpty<T>;
  delay: operator.operator_proto_delay<T>;
  distinctUntilChanged: operator.operator_proto_distinctUntilChanged<T>;
  do: operator.operator_proto_do<T>;
  expand: operator.operator_proto_expand<T>;
  filter: operator.operator_proto_filter<T>;
  finally: operator.operator_proto_finally<T>;
  first: operator.operator_proto_first<T>;
  flatMap: operator.operator_proto_mergeMap<T>;
  flatMapTo: operator.operator_proto_mergeMapTo<T>;
  groupBy: operator.operator_proto_groupBy<T>;
  ignoreElements: operator.operator_proto_ignoreElements<T>;
  last: operator.operator_proto_last<T>;
  every: operator.operator_proto_every<T>;
  map: operator.operator_proto_map<T>;
  mapTo: operator.operator_proto_mapTo<T>;
  materialize: operator.operator_proto_materialize<T>;
  merge: operator.operator_proto_merge<T>;
  mergeAll: operator.operator_proto_mergeAll<T>;
  mergeMap: operator.operator_proto_mergeMap<T>;
  mergeMapTo: operator.operator_proto_mergeMapTo<T>;
  multicast: operator.operator_proto_multicast<T>;
  observeOn: operator.operator_proto_observeOn<T>;
  partition: operator.operator_proto_partition<T>;
  publish: operator.operator_proto_publish<T>;
  publishBehavior: operator.operator_proto_publishBehavior<T>;
  publishReplay: operator.operator_proto_publishReplay<T>;
  publishLast: operator.operator_proto_publishLast<T>;
  reduce: operator.operator_proto_reduce<T>;
  repeat: operator.operator_proto_repeat<T>;
  retry: operator.operator_proto_retry<T>;
  retryWhen: operator.operator_proto_retryWhen<T>;
  sample: operator.operator_proto_sample<T>;
  sampleTime: operator.operator_proto_sampleTime<T>;
  scan: operator.operator_proto_scan<T>;
  share: operator.operator_proto_share<T>;
  single: operator.operator_proto_single<T>;
  skip: operator.operator_proto_skip<T>;
  skipUntil: operator.operator_proto_skipUntil<T>;
  skipWhile: operator.operator_proto_skipWhile<T>;
  startWith: operator.operator_proto_startWith<T>;
  subscribeOn: operator.operator_proto_subscribeOn<T>;
  switch: operator.operator_proto_switch<T>;
  switchMap: operator.operator_proto_switchMap<T>;
  switchMapTo: operator.operator_proto_switchMapTo<T>;
  take: operator.operator_proto_take<T>;
  takeUntil: operator.operator_proto_takeUntil<T>;
  takeWhile: operator.operator_proto_takeWhile<T>;
  throttle: operator.operator_proto_throttle<T>;
  throttleTime: operator.operator_proto_throttleTime<T>;
  timeout: operator.operator_proto_timeout<T>;
  timeoutWith: operator.operator_proto_timeoutWith<T>;
  toArray: operator.operator_proto_toArray<T>;
  toPromise: operator.operator_proto_toPromise<T>;
  window: operator.operator_proto_window<T>;
  windowCount: operator.operator_proto_windowCount<T>;
  windowTime: operator.operator_proto_windowTime<T>;
  windowToggle: operator.operator_proto_windowToggle<T>;
  windowWhen: operator.operator_proto_windowWhen<T>;
  withLatestFrom: operator.operator_proto_withLatestFrom<T>;
  zip: operator.operator_proto_zip<T>;
  zipAll: operator.operator_proto_zipAll<T>;
}
